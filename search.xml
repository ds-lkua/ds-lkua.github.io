<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>linux shell的cut命令</title>
    <url>/2020/04/28/shell-cut/</url>
    <content><![CDATA[<ul>
<li>cut命令用来对文件内容以行为单位按照指定方式进行裁减，其基本形式如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cut OPTION... [FILE]...</span><br></pre></td></tr></table></figure>
其中OPTION指定裁减的方式，FILE为需要处理的文件，可以是一个或多个文件，也可以不制定输入文件，此时会从标准输入读取内容处理。</li>
<li>OPTION说明如下：<br>-b,–bytes=LIST  以字节为单位进行裁减输出<br>-c,–characters=LIST  以字符为单位进行参见输出<br>-f,–fields=LIST  根据制定分割符将一行内容拆分为多个field，以filed为单位输出，默认分隔符为\t，不包含该分隔符的行会整行输出<br>-d,–delimiter=DELIM   与”-f,–fields”组合使用，用来制定分隔符，分隔符只能是一个字符<br>-s,–only-delimited   与”-f, –fields”及”-d,-delimiter”组合使用，指定不包含指定分隔符的行不输出<br>–output-delimiter=STRING 指定输出内容的分隔符，默认为输入的分隔符，可以指定字符串<br>-z,–zero-terminated 行分隔符为\0,而不是\n<br>–complement 选取指定列之外的内容输出</li>
</ul>
<p>以上OPTION中的LIST为选取输出范围的描述，指定多个范围时需要以”,”分隔，具体语法如下：<br>N  选择第N个索引作为输出，索引从1开始算起<br>N— 选取从第N个索引起到行尾的内容作为输出<br>N-M 选取从N到M的所有内容作为输出<br>-M  选取开头至第M(包含M)个位置的内容作为输出</p>
<p>下面以如下内容文件a.txt作为示例演示常见用法(文件中的\0为字节0)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcdefgg\n</span><br><span class="line">这是一行\n</span><br></pre></td></tr></table></figure>

<p>-b, –bytes</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cut -b 5,5- a.txt  <span class="comment"># 选取第五列，及第6列到结尾的内容</span></span><br><span class="line">efgh</span><br><span class="line">��一行     <span class="comment"># 这里会有乱面是因为-b以字节为单位处理内容，这对于单字节内容没有问题，像汉字这种多字节字符可能会出现截取他的一部分情况，就会乱码</span></span><br></pre></td></tr></table></figure>

<p>-c, –characters</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cut -c 1 a.txt</span><br><span class="line">a</span><br><span class="line">这  // -c以字符为单位处理输出，所以对a.txt的第二行操作时不会将汉字按字节分离，不过这个命令我在centos7.5上运行没有问题，在ubuntu 20.4上没法正确输出，还是会乱码，所以最终建议该命令还是不要用于处理汉字内容比较好</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>cut</tag>
      </tags>
  </entry>
  <entry>
    <title>shell-ps</title>
    <url>/2020/05/03/shell-ps/</url>
    <content><![CDATA[<ul>
<li>ps命令用来获取系统当前运行的进程信息，支持通过制定不同的参数来选取不同的进程集合进行显示,其基本格式如下:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps [options]</span><br></pre></td></tr></table></figure></li>
<li>该命令支持多种风格的参数模式，<br>UNIX options:<br>BSD options:<br>GNU options:</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
        <tag>ps</tag>
      </tags>
  </entry>
  <entry>
    <title>linux shell常应命令教程集</title>
    <url>/2020/05/03/shell-tools/</url>
    <content><![CDATA[<ul>
<li><p>忽然发现对平时linux环境下处理各种问题、故障排查等用的shell命令从来没有系统的整理一下，有些命令用的时候还要man以下，所以打算把平时常用的命令(大部分应该是文本处理相关的命令)写下来加深下理解，本文知识一个大纲，大概列举下要写下来的命令，同时作简单的介绍，后面希望自己能坚持下去把每个命令单独展开写篇文章。</p>
</li>
<li><p>find<br>find命令主要用来搜索某个目录下的文件，这里以GUN版本为标准进行讲解,首先是命令基本格式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find path [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]</span><br></pre></td></tr></table></figure>
<p>-H,-L,-P选项主要用来控制对符号连接的处理方式,默认为-P，即不跟踪符号连接，也就是说处理到符号连接时将其作为普通文件处理<br>文件筛选的常用参数如下：<br>-mount,-xdev: 之检查和制定目录在统一个文件系统下的文件<br>-amin n:在过去n分钟内被读取过的文件<br>-anerwer file:比file更晚读取国的文件<br>-atime n:在过去n天内被读取国的文件<br>-cmin n:作过去n分钟内被修改过的文件<br>-cnewer file:比文件file更新的文件<br>-ctime n:在过去n天内被修改国的文件<br>-empty:空文件<br>-gid n or -group name:gid是n或group名为name的文件<br>-ipath p,-path p:路径名称符合p的文件，ipath忽略大小写<br>-name name,-iname name:文件名符合name的文件,iname会忽略大小写<br>-size n:文件大小是n的单位，b代表512位元组的区块，c代表字数，k代表kb,w是各个位元组<br>-type c:文件类型是c的文件(c的取值：d:目录 c:字符设备 b:块设备 p:？？ f:一般文件 l:符号连接 s:socket)<br>-pid n: process id是n的文件<br>相关实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find . -name <span class="string">"\*.c"</span> <span class="comment"># 查找当前目录下以".c"为后缀的文件</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f <span class="comment"># 查找当前目录及其子目录下的一般文件</span></span><br><span class="line">$ find . -ctime -20 查找当前目录及其子目录下最经20天内更新过的文件</span><br><span class="line">$ find /var/<span class="built_in">log</span> -<span class="built_in">type</span> f -mtime +7 -ok rm &#123;&#125; \; <span class="comment"># 查找/var/log目录中更改时间在7日以前的普通文件，并在删除前作询问</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -perm 644 -<span class="built_in">exec</span> ls -l &#123;&#125; \; 查找当前目录中权限为644的文件，并列出详情</span><br><span class="line">$ find / -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> ls &#123;&#125; \; 查找系统中长度为0的普通文件并列出其路径</span><br></pre></td></tr></table></figure>
</li>
<li><p>grep<br>grep/egrep/fgrep/rgrep 从指定文件逐行读取内容并输出符合指定表达式的行(后面几个为其变体，相当于制定grep -E,grep -F,grep -r),基本格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep [OPTION...] PATTERNS [FILE...]</span><br><span class="line">$ grep [OPTION...] -e PATTERNS [FILE...]</span><br><span class="line">$ grep [OPTION...] -f PATTERN_FILE [FILE...]</span><br></pre></td></tr></table></figure>
<p>以下几个flag控制PATTERNS的处理方式(即其语法)<br>-E 以扩展的正则表达式翻译PATTERNS<br>-F 以-固定字符串(fixed strings)-而不是正则表达式翻译PATTERNS<br>-G 默认的 BREs<br>-P 使用PCREs</p>
<p>-e PATTERNS: 使用PATTERNS<br>-f FILE: 从文件中读取表达式，每一行为一个表达式<br>-i: 不区分大小写<br>-v: 选取不符合表达式的行<br>-x: 要求整行匹配<br>-w: ??<br>以下参数控制输出内容<br>-c: 每个输入文件中只打印最多制定行数的内容(可以与-v配合使用)<br>–color: 以指定的颜色(由GREP_COLORS配置)输出匹配的字符串<br>-L： 修改输出行为,打印没有匹配内容的文件名而不是匹配的内容<br>-l:  修改输出行为,打印有匹配内容的文件名而不是匹配的内容<br>以下参数控制输出前缀<br>-b: 添加打印匹配哪个文件的哪个位置<br>-H: 打印文件名，该参数默认指定<br>-h: 不打印文件名<br>–label=LABEL: 将标准输出重命名为LABEL<br>-n:打印匹配的行数(从1开始计算)<br>-z,–null:</p>
</li>
</ul>
<ul>
<li><p>sed<br>sed，一个过滤、转换文本内容的流式编辑器，一般格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed [OPTION]... &#123;script-only-if-no-other-script&#125; [input-file]...</span><br></pre></td></tr></table></figure>
<p>参数说明如下：<br>-e script: 指定要运行的脚本<br>-f script-file:指定要运行的脚本文件</p>
</li>
<li><p>awk<br>awk</p>
</li>
<li><p>xargs</p>
</li>
<li><p>sort</p>
</li>
<li><p>uniq</p>
</li>
<li><p>seq</p>
</li>
<li><p>tr</p>
</li>
<li><p>cut</p>
</li>
<li><p>paste</p>
</li>
<li><p>wc</p>
</li>
<li><p>top</p>
</li>
<li><p>ps</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>dfs&amp;bfs</title>
    <url>/2020/05/12/dfs-bfs/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
